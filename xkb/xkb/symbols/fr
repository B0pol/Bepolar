// Generated by Kalamine
// KALAMINE::BEPOLAR::BEGIN
// Project page  : https://github.com/Ced-C/Bepolar
// Author        : Cèd’C
// Version       : 0.5.1
// Last change   : 2023-12-29
// License       : WTFPL - Do What The Fuck You Want Public License
//
// French (Bépolar)
//
// Base layer + dead key
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━━┓
// │ ¬   │ # ¡ │ « “ │ » ” │ ( „ │ )   │ @   │ + ÷ │ ^*ˇ │ / | │ * × │*µ   │ § ¶ ┃          ┃
// │ ~*~ │ 1 # │ 2 < │ 3 > │ 4 ( │ 5 ) │ 6 @ │ 7 ± │ 8*^ │ 9 \ │ 0 ° │ = ≠ │ % ‰ ┃ ⌫        ┃
// ┢━━━━━┷━━┱──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┺━━┳━━━━━━━┫
// ┃        ┃ B   │ M   │ P   │ O   │ W   │ Z   │ V   │ D   │ L   │ J   │ {   │ } £ ┃       ┃
// ┃ ↹      ┃   â │   û │   î │   ô │   œ │     │   ŭ │     │     │     │ [   │ ] ¢ ┃       ┃
// ┣━━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓  ⏎   ┃
// ┃         ┃ A   │ U   │ I   │ E   │ ;   │ C   │ T   │ S   │ R   │ N   │ "   │ &*¤ ┃      ┃
// ┃ ⇬       ┃   à │   ù │   é │   è │ , ê │   ç │   ™ │   ß │   ® │   ñ │ ' ` │ $ € ┃      ┃
// ┣━━━━━━┳━━┹──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┲━━┷━━━━━┻━━━━━━┫
// ┃      ┃ \   │ ! – │ Y   │ X   │ : · │ K   │ ? ¿ │ Q   │ G   │ H   │ F   ┃               ┃
// ┃ ⇧    ┃ / | │ - — │   ŷ │   _ │ . … │   æ │***¨ │     │   µ │   © │     ┃ ⇧             ┃
// ┣━━━━━━┻┳━━━━┷━━┳━━┷━━━━┱┴─────┴─────┴─────┴─────┴─────┴─┲━━━┷━━━┳━┷━━━━━╋━━━━━━━┳━━━━━━━┫
// ┃       ┃       ┃       ┃                                ┃       ┃       ┃       ┃       ┃
// ┃ Ctrl  ┃ super ┃ Alt   ┃ ␣                              ┃ AltGr ┃ super ┃ menu  ┃ Ctrl  ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┻━━━━━━━┛
//
// AltGr layer
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━━┓
// │     │   ¹ │   ² │   ³ │   ⁴ │   ⁵ │   ⁶ │   ⁷ │   ⁸ │   ⁹ │   ⁰ │     │     ┃          ┃
// │   ₍ │   ₁ │   ₂ │   ₃ │   ₄ │   ₅ │   ₆ │   ₇ │   ₈ │   ₉ │   ₀ │     │     ┃ ⌫        ┃
// ┢━━━━━┷━━┱──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┺━━┳━━━━━━━┫
// ┃        ┃     │     │     │  *¤ │   ‰ │  *^ │  *µ │   × │  *´ │  *` │     │     ┃       ┃
// ┃ ↹      ┃   @ │   < │   > │   $ │   % │   ^ │   & │   * │   ' │   ` │     │     ┃       ┃
// ┣━━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓  ⏎   ┃
// ┃         ┃     │   ⁽ │   ⁾ │     │   ≠ │  */ │   ± │   — │   ÷ │  *¨ │     │     ┃      ┃
// ┃ ⇬       ┃   { │   ( │   ) │   } │   = │   \ │   + │   - │   / │   " │     │     ┃      ┃
// ┣━━━━━━┳━━┹──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┲━━┷━━━━━┻━━━━━━┫
// ┃      ┃     │  *~ │     │     │   – │     │     │   ¬ │  *¸ │     │     ┃               ┃
// ┃ ⇧    ┃     │   ~ │   [ │   ] │   _ │   # │   | │   ! │   ; │   : │   ? ┃ ⇧             ┃
// ┣━━━━━━┻┳━━━━┷━━┳━━┷━━━━┱┴─────┴─────┴─────┴─────┴─────┴─┲━━━┷━━━┳━┷━━━━━╋━━━━━━━┳━━━━━━━┫
// ┃       ┃       ┃       ┃                                ┃       ┃       ┃       ┃       ┃
// ┃ Ctrl  ┃ super ┃ Alt   ┃ ␣                              ┃ AltGr ┃ super ┃ menu  ┃ Ctrl  ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┻━━━━━━━┛

partial alphanumeric_keys modifier_keys
xkb_symbols "bepolar" {
    name[group1]= "French (Bépolar)";
    key.type[group1] = "EIGHT_LEVEL";

    // Digits
    key <AE01> {[ 1               , numbersign      , numbersign      , exclamdown      , U2081           , onesuperior     , VoidSymbol      , VoidSymbol      ]}; // 1 # # ¡ ₁ ¹
    key <AE02> {[ 2               , guillemotleft   , less            , U201C           , U2082           , twosuperior     , VoidSymbol      , VoidSymbol      ]}; // 2 « < “ ₂ ²
    key <AE03> {[ 3               , guillemotright  , greater         , U201D           , U2083           , threesuperior   , VoidSymbol      , VoidSymbol      ]}; // 3 » > ” ₃ ³
    key <AE04> {[ 4               , parenleft       , parenleft       , U201E           , U2084           , U2074           , VoidSymbol      , VoidSymbol      ]}; // 4 ( ( „ ₄ ⁴
    key <AE05> {[ 5               , parenright      , parenright      , VoidSymbol      , U2085           , U2075           , VoidSymbol      , VoidSymbol      ]}; // 5 ) )   ₅ ⁵
    key <AE06> {[ 6               , at              , at              , VoidSymbol      , U2086           , U2076           , VoidSymbol      , VoidSymbol      ]}; // 6 @ @   ₆ ⁶
    key <AE07> {[ 7               , plus            , plusminus       , division        , U2087           , U2077           , VoidSymbol      , VoidSymbol      ]}; // 7 + ± ÷ ₇ ⁷
    key <AE08> {[ 8               , asciicircum     , dead_circumflex , dead_caron      , U2088           , U2078           , VoidSymbol      , VoidSymbol      ]}; // 8 ^ ^ ˇ ₈ ⁸
    key <AE09> {[ 9               , slash           , backslash       , bar             , U2089           , U2079           , VoidSymbol      , VoidSymbol      ]}; // 9 / \ | ₉ ⁹
    key <AE10> {[ 0               , asterisk        , degree          , multiply        , U2080           , U2070           , VoidSymbol      , VoidSymbol      ]}; // 0 * ° × ₀ ⁰

    // Letters, first row
    key <AD01> {[ b               , B               , acircumflex     , Acircumflex     , at              , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // b B â Â @
    key <AD02> {[ m               , M               , ucircumflex     , Ucircumflex     , less            , lessthanequal   , VoidSymbol      , VoidSymbol      ]}; // m M û Û < ≤
    key <AD03> {[ p               , P               , icircumflex     , Icircumflex     , greater         , greaterthanequal, VoidSymbol      , VoidSymbol      ]}; // p P î Î > ≥
    key <AD04> {[ o               , O               , ocircumflex     , Ocircumflex     , dollar          , dead_currency   , VoidSymbol      , VoidSymbol      ]}; // o O ô Ô $ ¤
    key <AD05> {[ w               , W               , oe              , OE              , percent         , U2030           , VoidSymbol      , VoidSymbol      ]}; // w W œ Œ % ‰
    key <AD06> {[ z               , Z               , VoidSymbol      , VoidSymbol      , asciicircum     , dead_circumflex , VoidSymbol      , VoidSymbol      ]}; // z Z     ^ ^
    key <AD07> {[ v               , V               , ubreve          , Ubreve          , ampersand       , dead_greek      , VoidSymbol      , VoidSymbol      ]}; // v V ŭ Ŭ & µ
    key <AD08> {[ d               , D               , VoidSymbol      , VoidSymbol      , asterisk        , multiply        , VoidSymbol      , VoidSymbol      ]}; // d D     * ×
    key <AD09> {[ l               , L               , VoidSymbol      , VoidSymbol      , apostrophe      , dead_acute      , VoidSymbol      , VoidSymbol      ]}; // l L     ' ´
    key <AD10> {[ j               , J               , VoidSymbol      , VoidSymbol      , grave           , dead_grave      , VoidSymbol      , VoidSymbol      ]}; // j J     ` `

    // Letters, second row
    key <AC01> {[ a               , A               , agrave          , Agrave          , braceleft       , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // a A à À {
    key <AC02> {[ u               , U               , ugrave          , Ugrave          , parenleft       , U207D           , VoidSymbol      , VoidSymbol      ]}; // u U ù Ù ( ⁽
    key <AC03> {[ i               , I               , eacute          , Eacute          , parenright      , U207E           , VoidSymbol      , VoidSymbol      ]}; // i I é É ) ⁾
    key <AC04> {[ e               , E               , egrave          , Egrave          , braceright      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // e E è È }
    key <AC05> {[ comma           , semicolon       , ecircumflex     , Ecircumflex     , equal           , notequal        , VoidSymbol      , VoidSymbol      ]}; // , ; ê Ê = ≠
    key <AC06> {[ c               , C               , ccedilla        , Ccedilla        , backslash       , dead_stroke     , VoidSymbol      , VoidSymbol      ]}; // c C ç Ç \ /
    key <AC07> {[ t               , T               , trademark       , VoidSymbol      , plus            , plusminus       , VoidSymbol      , VoidSymbol      ]}; // t T ™   + ±
    key <AC08> {[ s               , S               , ssharp          , U1E9E           , minus           , emdash          , VoidSymbol      , VoidSymbol      ]}; // s S ß ẞ - —
    key <AC09> {[ r               , R               , registered      , VoidSymbol      , slash           , division        , VoidSymbol      , VoidSymbol      ]}; // r R ®   / ÷
    key <AC10> {[ n               , N               , ntilde          , Ntilde          , quotedbl        , dead_diaeresis  , VoidSymbol      , VoidSymbol      ]}; // n N ñ Ñ " ¨

    // Letters, third row
    key <AB01> {[ minus           , exclam          , emdash          , endash          , asciitilde      , dead_tilde      , VoidSymbol      , VoidSymbol      ]}; // - ! — – ~ ~
    key <AB02> {[ y               , Y               , U0177           , U0176           , bracketleft     , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // y Y ŷ Ŷ [
    key <AB03> {[ x               , X               , underscore      , VoidSymbol      , bracketright    , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // x X _   ]
    key <AB04> {[ period          , colon           , ellipsis        , periodcentered  , underscore      , endash          , VoidSymbol      , VoidSymbol      ]}; // . : … · _ –
    key <AB05> {[ k               , K               , ae              , AE              , numbersign      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // k K æ Æ #
    key <AB06> {[ ISO_Level3_Latch, question        , dead_diaeresis  , questiondown    , bar             , brokenbar       , VoidSymbol      , VoidSymbol      ]}; // *¨ ? ¨ ¿ | ¦
    key <AB07> {[ q               , Q               , VoidSymbol      , VoidSymbol      , exclam          , notsign         , VoidSymbol      , VoidSymbol      ]}; // q Q     ! ¬
    key <AB08> {[ g               , G               , mu              , VoidSymbol      , semicolon       , dead_cedilla    , VoidSymbol      , VoidSymbol      ]}; // g G µ   ; ¸
    key <AB09> {[ h               , H               , copyright       , VoidSymbol      , colon           , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // h H ©   :
    key <AB10> {[ f               , F               , VoidSymbol      , VoidSymbol      , question        , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // f F     ?

    // Pinky keys
    key <AE11> {[ equal           , dead_greek      , notequal        , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // = µ ≠
    key <AE12> {[ percent         , section         , U2030           , paragraph       , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // % § ‰ ¶
    key <AE13> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; //
    key <AD11> {[ bracketleft     , braceleft       , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // [ {
    key <AD12> {[ bracketright    , braceright      , cent            , sterling        , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // ] } ¢ £
    key <AC11> {[ apostrophe      , quotedbl        , grave           , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // ' " `
    key <AB11> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; //
    key <TLDE> {[ asciitilde      , notsign         , dead_tilde      , VoidSymbol      , U208D           , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // ~ ¬ ~   ₍
    key <BKSL> {[ dollar          , ampersand       , EuroSign        , dead_currency   , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // $ & € ¤
    key <LSGT> {[ slash           , backslash       , bar             , brokenbar       , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // / \ | ¦

    // Space bar
    key <SPCE> {[ space           , U202F           , U2019           , U2019           , space           , nobreakspace    , VoidSymbol      , VoidSymbol      ]}; //     ’ ’

    // The “OneDeadKey” is an ISO_Level3_Latch, i.e. a “dead AltGr” key:
    // this is the only way to have a multi-purpose dead key with XKB.
    // The real AltGr key is an ISO_Level5_Switch.
    include "level5(ralt_switch)"
};
// KALAMINE::BEPOLAR::END
