// Generated by kalamine on 2024-02-11
//
// Project page  : https://github.com/Ced-C/Bepolar
// Author        : Cèd’C
// Version       : 0.6.0
// License       : WTFPL - Do What The Fuck You Want Public License
//
// French (Bépolar)
//
// Base layer + dead key
// ╭╌╌╌╌╌┰─────┬─────┬─────┬─────┬─────┰─────┬─────┬─────┬─────┬─────┰╌╌╌╌╌┬╌╌╌╌╌╮
// ┆ ¬   ┃ #   │ « “ │ » ” │ ( „ │ ) ‘ ┃ @   │ + ÷ │ ^*ˇ │ / | │ * × ┃*µ   ┆ § ¶ ┆
// ┆ ~*~ ┃ 1 & │ 2 < │ 3 > │ 4 ( │ 5 ) ┃ 6 @ │ 7 ± │ 8*^ │ 9 \ │ 0 ° ┃ = ≠ ┆ % ‰ ┆
// ╰╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
//       ┃ B   │ M   │ P   │ O   │ W   ┃ Z   │ V   │ D   │ L   │ J   ┃ {   ┆ }   ┆
//       ┃   â │   û │   î │   ô │   œ ┃     │   ŭ │     │     │     ┃ [   ┆ ]   ┆
//       ┠─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
//       ┃ A   │ U   │ I   │ E   │ ;   ┃ C   │ T   │ S   │ R   │ N   ┃ "   ┆ €*¤ ┆
//       ┃   à │   ù │   é │   è │ , ê ┃   ç │   ™ │   ß │   ® │   ñ ┃ ' ` ┆ $ ¢ ┆
// ╭╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┴╌╌╌╌╌╯
// ┆ \   ┃ ! ¡ │ Y   │ X   │ : · │ K   ┃ ? ¿ │ Q   │ G   │ H   │ F   ┃
// ┆ / | ┃ - — │   ŷ │   _ │ . … │   æ ┃***¨ │   – │   µ │   © │     ┃
// ╰╌╌╌╌╌┸─────┴─────┴─────┴─────┴─────┸─────┴─────┴─────┴─────┴─────┚
//
// AltGr layer
// ╭╌╌╌╌╌┰─────┬─────┬─────┬─────┬─────┰─────┬─────┬─────┬─────┬─────┰╌╌╌╌╌┬╌╌╌╌╌╮
// ┆     ┃   ¹ │   ² │   ³ │   ⁴ │   ⁵ ┃   ⁶ │   ⁷ │   ⁸ │   ⁹ │   ⁰ ┃     ┆     ┆
// ┆   ₍ ┃   ₁ │   ₂ │   ₃ │   ₄ │   ₅ ┃   ₆ │   ₇ │   ₈ │   ₉ │   ₀ ┃   ₎ ┆     ┆
// ╰╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
//       ┃     │     │     │  *¤ │   ‰ ┃  *^ │  *µ │   × │  *´ │  *` ┃     ┆     ┆
//       ┃   @ │   < │   > │   $ │   % ┃   ^ │   & │   * │   ' │   ` ┃     ┆     ┆
//       ┠─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
//       ┃     │   ⁽ │   ⁾ │     │   ≠ ┃  */ │   ± │   — │   ÷ │  *¨ ┃     ┆  *¤ ┆
//       ┃   { │   ( │   ) │   } │   = ┃   \ │   + │   - │   / │   " ┃     ┆     ┆
// ╭╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┴╌╌╌╌╌╯
// ┆     ┃  *~ │     │     │   – │     ┃     │   ¬ │  *¸ │     │     ┃
// ┆     ┃   ~ │   [ │   ] │   _ │   # ┃   | │   ! │   ; │   : │   ? ┃
// ╰╌╌╌╌╌┸─────┴─────┴─────┴─────┴─────┸─────┴─────┴─────┴─────┴─────┚

partial alphanumeric_keys modifier_keys
xkb_symbols "bepolar" {
    name[group1]= "French (Bépolar)";
    key.type[group1] = "EIGHT_LEVEL";

    // Digits
    key <AE01> {[ 1               , numbersign      , U2081           , onesuperior     , ampersand       , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // 1 # &   ₁ ¹
    key <AE02> {[ 2               , guillemotleft   , U2082           , twosuperior     , less            , U201C           , VoidSymbol      , VoidSymbol      ]}; // 2 « < “ ₂ ²
    key <AE03> {[ 3               , guillemotright  , U2083           , threesuperior   , greater         , U201D           , VoidSymbol      , VoidSymbol      ]}; // 3 » > ” ₃ ³
    key <AE04> {[ 4               , parenleft       , U2084           , U2074           , parenleft       , U201E           , VoidSymbol      , VoidSymbol      ]}; // 4 ( ( „ ₄ ⁴
    key <AE05> {[ 5               , parenright      , U2085           , U2075           , parenright      , U2018           , VoidSymbol      , VoidSymbol      ]}; // 5 ) ) ‘ ₅ ⁵
    key <AE06> {[ 6               , at              , U2086           , U2076           , at              , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // 6 @ @   ₆ ⁶
    key <AE07> {[ 7               , plus            , U2087           , U2077           , plusminus       , division        , VoidSymbol      , VoidSymbol      ]}; // 7 + ± ÷ ₇ ⁷
    key <AE08> {[ 8               , asciicircum     , U2088           , U2078           , dead_circumflex , dead_caron      , VoidSymbol      , VoidSymbol      ]}; // 8 ^ ^ ˇ ₈ ⁸
    key <AE09> {[ 9               , slash           , U2089           , U2079           , backslash       , bar             , VoidSymbol      , VoidSymbol      ]}; // 9 / \ | ₉ ⁹
    key <AE10> {[ 0               , asterisk        , U2080           , U2070           , degree          , multiply        , VoidSymbol      , VoidSymbol      ]}; // 0 * ° × ₀ ⁰

    // Letters, first row
    key <AD01> {[ b               , B               , at              , VoidSymbol      , acircumflex     , Acircumflex     , VoidSymbol      , VoidSymbol      ]}; // b B â Â @
    key <AD02> {[ m               , M               , less            , lessthanequal   , ucircumflex     , Ucircumflex     , VoidSymbol      , VoidSymbol      ]}; // m M û Û < ≤
    key <AD03> {[ p               , P               , greater         , greaterthanequal, icircumflex     , Icircumflex     , VoidSymbol      , VoidSymbol      ]}; // p P î Î > ≥
    key <AD04> {[ o               , O               , dollar          , dead_currency   , ocircumflex     , Ocircumflex     , VoidSymbol      , VoidSymbol      ]}; // o O ô Ô $ ¤
    key <AD05> {[ w               , W               , percent         , U2030           , oe              , OE              , VoidSymbol      , VoidSymbol      ]}; // w W œ Œ % ‰
    key <AD06> {[ z               , Z               , asciicircum     , dead_circumflex , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // z Z     ^ ^
    key <AD07> {[ v               , V               , ampersand       , dead_greek      , ubreve          , Ubreve          , VoidSymbol      , VoidSymbol      ]}; // v V ŭ Ŭ & µ
    key <AD08> {[ d               , D               , asterisk        , multiply        , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // d D     * ×
    key <AD09> {[ l               , L               , apostrophe      , dead_acute      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // l L     ' ´
    key <AD10> {[ j               , J               , grave           , dead_grave      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // j J     ` `

    // Letters, second row
    key <AC01> {[ a               , A               , braceleft       , VoidSymbol      , agrave          , Agrave          , VoidSymbol      , VoidSymbol      ]}; // a A à À {
    key <AC02> {[ u               , U               , parenleft       , U207D           , ugrave          , Ugrave          , VoidSymbol      , VoidSymbol      ]}; // u U ù Ù ( ⁽
    key <AC03> {[ i               , I               , parenright      , U207E           , eacute          , Eacute          , VoidSymbol      , VoidSymbol      ]}; // i I é É ) ⁾
    key <AC04> {[ e               , E               , braceright      , VoidSymbol      , egrave          , Egrave          , VoidSymbol      , VoidSymbol      ]}; // e E è È }
    key <AC05> {[ comma           , semicolon       , equal           , notequal        , ecircumflex     , Ecircumflex     , VoidSymbol      , VoidSymbol      ]}; // , ; ê Ê = ≠
    key <AC06> {[ c               , C               , backslash       , dead_stroke     , ccedilla        , Ccedilla        , VoidSymbol      , VoidSymbol      ]}; // c C ç Ç \ /
    key <AC07> {[ t               , T               , plus            , plusminus       , trademark       , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // t T ™   + ±
    key <AC08> {[ s               , S               , minus           , emdash          , ssharp          , U1E9E           , VoidSymbol      , VoidSymbol      ]}; // s S ß ẞ - —
    key <AC09> {[ r               , R               , slash           , division        , registered      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // r R ®   / ÷
    key <AC10> {[ n               , N               , quotedbl        , dead_diaeresis  , ntilde          , Ntilde          , VoidSymbol      , VoidSymbol      ]}; // n N ñ Ñ " ¨

    // Letters, third row
    key <AB01> {[ minus           , exclam          , asciitilde      , dead_tilde      , emdash          , exclamdown      , VoidSymbol      , VoidSymbol      ]}; // - ! — ¡ ~ ~
    key <AB02> {[ y               , Y               , bracketleft     , VoidSymbol      , U0177           , U0176           , VoidSymbol      , VoidSymbol      ]}; // y Y ŷ Ŷ [
    key <AB03> {[ x               , X               , bracketright    , VoidSymbol      , underscore      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // x X _   ]
    key <AB04> {[ period          , colon           , underscore      , endash          , ellipsis        , periodcentered  , VoidSymbol      , VoidSymbol      ]}; // . : … · _ –
    key <AB05> {[ k               , K               , numbersign      , VoidSymbol      , ae              , AE              , VoidSymbol      , VoidSymbol      ]}; // k K æ Æ #
    key <AB06> {[ ISO_Level5_Latch, question        , bar             , brokenbar       , dead_diaeresis  , questiondown    , VoidSymbol      , VoidSymbol      ]}; // *¨ ? ¨ ¿ | ¦
    key <AB07> {[ q               , Q               , exclam          , notsign         , endash          , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // q Q –   ! ¬
    key <AB08> {[ g               , G               , semicolon       , dead_cedilla    , mu              , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // g G µ   ; ¸
    key <AB09> {[ h               , H               , colon           , VoidSymbol      , copyright       , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // h H ©   :
    key <AB10> {[ f               , F               , question        , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // f F     ?

    // Pinky keys
    key <AE11> {[ equal           , dead_greek      , U208E           , VoidSymbol      , notequal        , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // = µ ≠   ₎
    key <AE12> {[ percent         , section         , VoidSymbol      , VoidSymbol      , U2030           , paragraph       , VoidSymbol      , VoidSymbol      ]}; // % § ‰ ¶
    key <AE13> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; //
    key <AD11> {[ bracketleft     , braceleft       , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // [ {
    key <AD12> {[ bracketright    , braceright      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // ] }
    key <AC11> {[ apostrophe      , quotedbl        , VoidSymbol      , VoidSymbol      , grave           , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // ' " `
    key <AB11> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; //
    key <TLDE> {[ asciitilde      , notsign         , U208D           , VoidSymbol      , dead_tilde      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // ~ ¬ ~   ₍
    key <BKSL> {[ dollar          , EuroSign        , VoidSymbol      , dead_currency   , cent            , dead_currency   , VoidSymbol      , VoidSymbol      ]}; // $ € ¢ ¤   ¤
    key <LSGT> {[ slash           , backslash       , VoidSymbol      , VoidSymbol      , bar             , brokenbar       , VoidSymbol      , VoidSymbol      ]}; // / \ | ¦

    // Space bar
    key <SPCE> {[ space           , U202F           , space           , nobreakspace    , U2019           , U2019           , VoidSymbol      , VoidSymbol      ]}; //     ’ ’

    // The AltGr key is an ISO_Level3_Shift:
    include "level3(ralt_switch)"

    // The “OneDeadKey” is an ISO_Level5_Latch, which is activated by this:
    // (note: MDSW [Mode_switch] is an alias for LVL5 on recent versions of XKB)
    replace key <MDSW> {
        type[Group1] = "ONE_LEVEL",
        symbols[Group1] = [ ISO_Level5_Shift ]
    };
    modifier_map Mod3 { <MDSW> };
};
