// Generated by kalamine on 2024-05-26
//
// This is a standalone XKB keymap file. To apply this keymap, use:
//   xkbcomp -w9 bepergol.xkb_keymap $DISPLAY
//
// DO NOT COPY THIS INTO xkb/symbols: THIS WOULD MESS UP YOUR XKB CONFIG.
//
// File          : bepergol.xkb_keymap
// Project page  : https://github.com/B0pol/bepolar
// Author        : B0pol
// Version       : 0.7.0
// License       : WTFPL - Do What The Fuck You Want Public License
//
// Français (Bépergol)
//

xkb_keymap {
  xkb_keycodes      { include "evdev"    };
  xkb_types         { include "complete" };
  xkb_compatibility { include "complete" };

  // Base layer + dead key
  // ╭╌╌╌╌╌┰─────┬─────┬─────┬─────┬─────┰─────┬─────┬─────┬─────┬─────┰╌╌╌╌╌┬╌╌╌╌╌╮
  // ┆ ~   ┃ € ‚ │ « ‘ │ » ’ │ $   │ %   ┃ ^   │ &   │ *   │ #   │ @   ┃ _ – ┆ + ± ┆
  // ┆ `   ┃ 1 „ │ 2 “ │ 3 ” │ 4 ¢ │ 5 ‰ ┃ 6   │ 7   │ 8 § │ 9 ¶ │ 0 ° ┃ / ÷ ┆ = ≠ ┆
  // ╰╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
  //       ┃ B   │ M   │ P   │ O   │ W   ┃ Z   │ V   │ D   │ L   │ J   ┃ {   ┆ }   ┆
  //       ┃   â │   ç │   œ │   ô │     ┃     │   µ │   _ │     │   û ┃ [   ┆ ]   ┆
  //       ┠─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
  //       ┃ A   │ U   │ I   │ E   │ ;   ┃ C   │ T   │ S   │ R   │ N   ┃ "   ┆ €*¤ ┆
  //       ┃   à │   é │   è │   ê │ , ñ ┃   ( │   ) │   î │   ï │   ù ┃ '   ┆ $ ¢ ┆
  // ╭╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┴╌╌╌╌╌╯
  // ┆ \   ┃ ! ¡ │ Y   │ X ¿ │ : · │ K   ┃ ?   │ Q   │ G   │ H • │ F   ┃
  // ┆ / | ┃ - æ │   ß │   ‑ │ . – │   — ┃***¨ │   … │  *µ │   · │     ┃
  // ╰╌╌╌╌╌┸─────┴─────┴─────┴─────┴─────┸─────┴─────┴─────┴─────┴─────┚

  // AltGr layer
  // ╭╌╌╌╌╌┰─────┬─────┬─────┬─────┬─────┰─────┬─────┬─────┬─────┬─────┰╌╌╌╌╌┬╌╌╌╌╌╮
  // ┆     ┃   ¹ │   ² │   ³ │   ⁴ │   ⁵ ┃   ⁶ │   ⁷ │   ⁸ │   ⁹ │   ⁰ ┃     ┆     ┆
  // ┆     ┃   ₁ │   ₂ │   ₃ │   ₄ │   ₅ ┃   ₆ │   ₇ │   ₈ │   ₉ │   ₀ ┃     ┆     ┆
  // ╰╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
  //       ┃  *^ │     │     │  *¤ │   ‰ ┃  *˚ │     │   × │  *´ │  *` ┃     ┆     ┆
  //       ┃   ^ │   < │   > │   $ │   % ┃   @ │   & │   * │   ' │   ` ┃     ┆     ┆
  //       ┠─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
  //       ┃  *ˇ │     │     │  *˙ │   ≠ ┃  */ │   ± │  *¯ │   ÷ │  *” ┃     ┆     ┆
  //       ┃   { │   ( │   ) │   } │   = ┃   \ │   + │   - │   / │   " ┃     ┆     ┆
  // ╭╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┴╌╌╌╌╌╯
  // ┆     ┃  *~ │  *, │  *˛ │   – │     ┃     │   ¬ │  *¸ │   : │  *˘ ┃
  // ┆     ┃   ~ │   [ │   ] │   _ │   # ┃   | │   ! │   ; │   : │   ? ┃
  // ╰╌╌╌╌╌┸─────┴─────┴─────┴─────┴─────┸─────┴─────┴─────┴─────┴─────┚

  partial alphanumeric_keys modifier_keys
  xkb_symbols "bepergol" {
    include "pc"
    include "inet(evdev)"

    // The “OneDeadKey” is an ISO_Level3_Latch, i.e. a “dead AltGr” key.
    // This is the only way to have a multi-purpose dead key with XKB.

    // The real AltGr key should be an ISO_Level5_Switch; however,
    // ISO_Level5_Switch does not work as expected when applying this layout
    // with xkbcomp, so let’s use two groups instead and make the AltGr key a
    // group selector.

    name[group1]= "Français (Bépergol)";
    name[group2]= "AltGr";

    key.type[group1] = "FOUR_LEVEL";
    key.type[group2] = "TWO_LEVEL";

    // Digits
    key <AE01> {[ 1               , EuroSign        , U201E           , U201A           ],[ U2081           , onesuperior     ]}; // 1 € „ ‚ ₁ ¹
    key <AE02> {[ 2               , guillemotleft   , U201C           , U2018           ],[ U2082           , twosuperior     ]}; // 2 « “ ‘ ₂ ²
    key <AE03> {[ 3               , guillemotright  , U201D           , U2019           ],[ U2083           , threesuperior   ]}; // 3 » ” ’ ₃ ³
    key <AE04> {[ 4               , dollar          , cent            , VoidSymbol      ],[ U2084           , U2074           ]}; // 4 $ ¢   ₄ ⁴
    key <AE05> {[ 5               , percent         , U2030           , VoidSymbol      ],[ U2085           , U2075           ]}; // 5 % ‰   ₅ ⁵
    key <AE06> {[ 6               , asciicircum     , VoidSymbol      , VoidSymbol      ],[ U2086           , U2076           ]}; // 6 ^     ₆ ⁶
    key <AE07> {[ 7               , ampersand       , VoidSymbol      , VoidSymbol      ],[ U2087           , U2077           ]}; // 7 &     ₇ ⁷
    key <AE08> {[ 8               , asterisk        , section         , VoidSymbol      ],[ U2088           , U2078           ]}; // 8 * §   ₈ ⁸
    key <AE09> {[ 9               , numbersign      , paragraph       , VoidSymbol      ],[ U2089           , U2079           ]}; // 9 # ¶   ₉ ⁹
    key <AE10> {[ 0               , at              , degree          , VoidSymbol      ],[ U2080           , U2070           ]}; // 0 @ °   ₀ ⁰

    // Letters, first row
    key <AD01> {[ b               , B               , acircumflex     , Acircumflex     ],[ asciicircum     , dead_circumflex ]}; // b B â Â ^ ^
    key <AD02> {[ m               , M               , ccedilla        , Ccedilla        ],[ less            , lessthanequal   ]}; // m M ç Ç < ≤
    key <AD03> {[ p               , P               , oe              , OE              ],[ greater         , greaterthanequal]}; // p P œ Œ > ≥
    key <AD04> {[ o               , O               , ocircumflex     , Ocircumflex     ],[ dollar          , dead_currency   ]}; // o O ô Ô $ ¤
    key <AD05> {[ w               , W               , VoidSymbol      , VoidSymbol      ],[ percent         , U2030           ]}; // w W     % ‰
    key <AD06> {[ z               , Z               , VoidSymbol      , VoidSymbol      ],[ at              , dead_abovering  ]}; // z Z     @ ˚
    key <AD07> {[ v               , V               , mu              , VoidSymbol      ],[ ampersand       , VoidSymbol      ]}; // v V µ   &
    key <AD08> {[ d               , D               , underscore      , VoidSymbol      ],[ asterisk        , multiply        ]}; // d D _   * ×
    key <AD09> {[ l               , L               , VoidSymbol      , VoidSymbol      ],[ apostrophe      , dead_acute      ]}; // l L     ' ´
    key <AD10> {[ j               , J               , ucircumflex     , Ucircumflex     ],[ grave           , dead_grave      ]}; // j J û Û ` `

    // Letters, second row
    key <AC01> {[ a               , A               , agrave          , Agrave          ],[ braceleft       , dead_caron      ]}; // a A à À { ˇ
    key <AC02> {[ u               , U               , eacute          , Eacute          ],[ parenleft       , VoidSymbol      ]}; // u U é É (
    key <AC03> {[ i               , I               , egrave          , Egrave          ],[ parenright      , VoidSymbol      ]}; // i I è È )
    key <AC04> {[ e               , E               , ecircumflex     , Ecircumflex     ],[ braceright      , dead_abovedot   ]}; // e E ê Ê } ˙
    key <AC05> {[ comma           , semicolon       , ntilde          , Ntilde          ],[ equal           , notequal        ]}; // , ; ñ Ñ = ≠
    key <AC06> {[ c               , C               , parenleft       , VoidSymbol      ],[ backslash       , dead_stroke     ]}; // c C (   \ /
    key <AC07> {[ t               , T               , parenright      , VoidSymbol      ],[ plus            , plusminus       ]}; // t T )   + ±
    key <AC08> {[ s               , S               , icircumflex     , Icircumflex     ],[ minus           , dead_macron     ]}; // s S î Î - ˉ
    key <AC09> {[ r               , R               , idiaeresis      , Idiaeresis      ],[ slash           , division        ]}; // r R ï Ï / ÷
    key <AC10> {[ n               , N               , ugrave          , Ugrave          ],[ quotedbl        , dead_doubleacute]}; // n N ù Ù " ˝

    // Letters, third row
    key <AB01> {[ minus           , exclam          , ae              , exclamdown      ],[ asciitilde      , dead_tilde      ]}; // - ! æ ¡ ~ ~
    key <AB02> {[ y               , Y               , ssharp          , U1E9E           ],[ bracketleft     , dead_belowcomma ]}; // y Y ß ẞ [ ,
    key <AB03> {[ x               , X               , U2011           , questiondown    ],[ bracketright    , dead_ogonek     ]}; // x X ‑ ¿ ] ˛
    key <AB04> {[ period          , colon           , endash          , periodcentered  ],[ underscore      , endash          ]}; // . : – · _ –
    key <AB05> {[ k               , K               , emdash          , VoidSymbol      ],[ numbersign      , VoidSymbol      ]}; // k K —   #
    key <AB06> {[ ISO_Level3_Latch, question        , dead_diaeresis  , VoidSymbol      ],[ bar             , brokenbar       ]}; // *¨ ? ¨   | ¦
    key <AB07> {[ q               , Q               , ellipsis        , VoidSymbol      ],[ exclam          , notsign         ]}; // q Q …   ! ¬
    key <AB08> {[ g               , G               , dead_greek      , VoidSymbol      ],[ semicolon       , dead_cedilla    ]}; // g G µ   ; ¸
    key <AB09> {[ h               , H               , periodcentered  , U2022           ],[ colon           , colon           ]}; // h H · • : :
    key <AB10> {[ f               , F               , VoidSymbol      , VoidSymbol      ],[ question        , dead_breve      ]}; // f F     ? ˘

    // Pinky keys
    key <AE11> {[ slash           , underscore      , division        , endash          ],[ VoidSymbol      , VoidSymbol      ]}; // / _ ÷ –
    key <AE12> {[ equal           , plus            , notequal        , plusminus       ],[ VoidSymbol      , VoidSymbol      ]}; // = + ≠ ±
    key <AE13> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; //
    key <AD11> {[ bracketleft     , braceleft       , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // [ {
    key <AD12> {[ bracketright    , braceright      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // ] }
    key <AC11> {[ apostrophe      , quotedbl        , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // ' "
    key <AB11> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; //
    key <TLDE> {[ grave           , asciitilde      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // ` ~
    key <BKSL> {[ dollar          , EuroSign        , cent            , dead_currency   ],[ VoidSymbol      , VoidSymbol      ]}; // $ € ¢ ¤
    key <LSGT> {[ slash           , backslash       , bar             , brokenbar       ],[ VoidSymbol      , VoidSymbol      ]}; // / \ | ¦

    // Space bar
    key <SPCE> {[ space           , U202F           , U2019           , U2019           ],[ space           , nobreakspace    ]}; //     ’ ’

    // AltGr
    // Note: the `ISO_Level5_Latch` here is meaningless but helps with Chromium.
    key <RALT> {
      type = "TWO_LEVEL",
      symbols = [ ISO_Level5_Latch, ISO_Level5_Latch ],
      actions = [ SetGroup(group=2), SetGroup(group=2) ]
    };
  };
};
// vim: ft=xkb:fdm=indent:ts=2:nowrap
